(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % %7)
(require 'keechma.toolbox.ui)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % %7)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7)
(require 'keechma.toolbox.ui)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(gensym :arg)
(gensym 'arg)
(symbol (gensym 'arg) 7)
(symbol (str (gensym 'arg) 7))
(symbol (str (gensym 'arg) "_" 7))
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(range 0 7)
(range 0 0(
(range 0 0)
(into [] (range 0 1))
(into [] (range 0 2))
(into [] (range 0 2) [4])
(mapv inc (range 0 1))
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % %&)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 % )
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 )
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 )
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 )
(use 'keechma.toolbox.ui :reload)
(keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 )
(def a (keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 ))
(a)
(a 1 2 3 4 5 6 7)
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mem-cmd ctx [:foo :bar] % test "bar" %7 %1 ))
(def a (keechma.toolbox.ui/<mem-cmd {:foo :bar} [:foo :bar] % test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mem-cmd {:foo :bar} [:foo :bar] % test "bar" %7 %1 ))
(a 1 2 3 4 5 6 7)
(def a (keechma.toolbox.ui/<mem-cmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(a 1 2 3 4 5 6 7)
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(a 1 2 3 4 5 6 7)
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(a 1 2 3 4 5 6 7)
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(a 1 2 3 4 5 6 7)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(hash a)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(hash a)
(def a (keechma.toolbox.ui/memoize-ui-fn {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
(use 'keechma.toolbox.ui :reload)
(def a (keechma.toolbox.ui/<mcmd {:foo :bar} [:foo :bar] % :test "bar" %7 %1 ))
a
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo])
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo])
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo])
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo])
(<mcmd {:app-db (atom {})} [:foo] (test %))
(<mcmd {:app-db (atom {})} [:foo] (test ))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a %))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a %))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a %))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar &%]))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar %&]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar %&]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar %&]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar %&]))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(use 'keechma.toolbox.ui :reload)
(defn a [a])
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(defn a [& args] (pritnln args))
(defn a [& args] (println args))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(use 'clojure.pprint))
(use 'clojure.pprint)
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(macroexpand '(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar])))
(use 'keechma.toolbox.ui :reload)
(macroexpand '(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar])))
(use 'keechma.toolbox.ui :reload)
(macroexpand '(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar])))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(macroexpand '(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar])))
(concat '(foo) '(bar))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(defn a [& args] (println args))
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(defn a [args] (println args))
(defn a [arg] (println arg (type arg)))
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(defn a [arg] (println "=====" arg (type arg)))
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {:boo (a %)} (a % [:foo :bar]))
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
~
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(type <mcmd)
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(defn a [& args] a)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(defmacro a [& args])
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
a
(val? a)
(fn? a)
(macroexpand-1)
(macroexpand-1 a)
(macroexpand-1 (a))
(defn b [])
(macroexpand-1 (b))
(var? a)
(meta a)
(macroexpand (a))
(macroexpand a)
(defmacro a [& args] "bla")
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(defmacro a [& args] "A RETURN")
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(defn #foo [a b] (+ a b))
(defmacro a [a])
a
(find-var 'a)
(find-var a)
(var a)
(str (var a))
(if a :a :b)
(let [b 1] (var b))
(var b)
(defmacro a [b])
(macroexpand 'a)
(macroexpand a)
(defn b [])
(macroexpand 'b)
(macroexpand '+)
(macroexpand-1 '+)
(macroexpand-1 's)
(macroexpand-1 a)
(macroexpand-1 b)
(use 'keechma.toolbox.ui :reload)
(macroexpand '(<mcmd {} [:Foo :bar] [a b c]))
(defmacro a [])
(resolve 'a)
(resolve 'b)
(defmacro a [])
(resolve a)
(resolve 'a)
(meta (resolve 'a))
(use 'keechma.toolbox.ui :reload)
(defmacro a [])
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(defmacro a [& args])
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
(use 'keechma.toolbox.ui :reload)
(<mcmd {:app-db (atom {})} [:foo] {% (a %)} (a % [:foo :bar]))
